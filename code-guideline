1. 块级作用域
let取代var
全局常量和线程安全
let与const之间，建议优先使用const，尤其是在全局环境，不应该设置变量，只应设置常量。
原因：
- const可以提醒阅读程序的人，这个变量不应该改变
- const比较符合函数式编程思想，运算不改变值，只是新建值，而且有利于将来的分布式运算
- JavaScript编译器会对const进行优化，有利于提高程序的运行效率
- 防止了无意间修改变量值所导致的错误

所有的函数都应该设置为常量。
长远来看，JavaScript 可能会有多线程的实现。这时let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。

2. 字符串 --- 静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。
3. 解构赋值
使用数组成员对变量赋值时，优先使用解构赋值。
函数的参数如果是对象的成员，优先使用解构赋值。
如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。

4. 对象
单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。
对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。
如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。这样一来，所有属性就在一个地方定义了。
对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。

5. 数组
使用扩展运算符（...）拷贝数组。
使用 Array.from 方法，将类似数组的对象转为数组。

6. 函数
立即执行函数可以写成箭头函数的形式。
(() => {
  console.log('Welcome to the Internet.');
})();

那些使用匿名函数当作参数的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。
箭头函数取代Function.prototype.bind，不应再用 self/_this/that 绑定 this。
简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。
所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。
function divide(a, b, { option = false } = {}) {
}

不要在函数体内使用 arguments 变量，使用 rest 运算符（...）代替。
使用默认值语法设置函数参数的默认值。

7. Map结构
注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要key: value的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。

8. Class
总是用 Class，取代需要 prototype 的操作。因为写法更简洁，更易于理解。
使用extends实现继承，更简单，不会有破坏instanceof运算的危险。

9. 模块
Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用import取代require。
使用export取代module.exports。
如果模块只有一个输出值，就使用export default，如果模块有多个输出值，就不使用export default，export default与普通的export不要同时使用。
不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。
如果模块默认输出一个函数，函数名的首字母应该小写。
function makeStyleGuide() {
}

export default makeStyleGuide;

如果模块默认输出一个对象，对象名的首字母应该大写。
const StyleGuide = {
  es6: {
  }
};

export default StyleGuide;













